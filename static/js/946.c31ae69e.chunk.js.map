{"version":3,"file":"static/js/946.c31ae69e.chunk.js","mappings":"kNAAe,SAASA,IACtB,OAAO,mBAAQC,UAAU,oBAAlB,oB,aCOM,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAiBA,OACE,kBAAMH,SAZa,SAAAI,GACnBA,EAAEC,iBACuB,KAArBH,EAAUI,QAIdN,EAASE,GAETC,EAAa,KALXI,EAAAA,GAAAA,MAAY,gEAAe,CAAEC,MAAO,aASRV,UAAU,cAAxC,WACE,kBACEA,UAAU,4BACVW,KAAK,OACLC,MAAOR,EACPS,SArBmB,SAAAP,GACvBD,EAAaC,EAAEQ,cAAcF,MAAMG,gBAqB/BC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,SAACnB,EAAD,O,0DCzBS,SAASoB,EAAT,GAAoC,IAAdC,EAAa,EAAbA,UACnC,GAA4BjB,EAAAA,EAAAA,UAAS,MAArC,eAAOkB,EAAP,KAAeC,EAAf,KACA,GAA6BnB,EAAAA,EAAAA,WAAS,GAAtC,eAAOoB,EAAP,KAAgBC,EAAhB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,6FACjBF,GAAU,GADO,mBAGWG,EAAAA,EAAAA,IAAkBP,GAH7B,sBAGPQ,EAHO,EAGPA,SACIC,QAAU,GAJP,sBAKP,IAAIC,MALG,OAOfR,EAAUM,GACVJ,GAAU,GARK,kDAUff,EAAAA,GAAAA,KAAA,0BAA8BW,EAA9B,2BAAwD,CACtDV,MAAO,YAETc,GAAU,GAbK,0DAAH,qDAgBhBE,MACC,CAACN,KAGF,gCACGG,IAAW,SAACQ,EAAA,EAAD,IACXV,IACC,wBACGA,EAAOW,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GAC7B,OACE,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKD,GACPE,MAAO,CAAEC,SAAS,iBAAD,OAAmBjB,IAFtC,SAIGa,KALIC,W,aCrCR,SAASI,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,IAAIC,gBAAgBH,EAASI,QAAQC,IAAI,SAExDC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,iCACE,SAAC7C,EAAD,CAAWC,SALU,SAAA6C,GACvBF,EAAS,UAAD,OAAWE,OAKhBN,IAAgB,SAACtB,EAAD,CAAYC,UAAWqB,S,oLClBxCO,EAAW,6BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA4BC,EAA5B,+BAAkC,GAAIC,EAAtC,+BAA+C,GAA/C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAI5B,MAAM,cAJ/B,2GAOO,SAAS6B,EAAaC,GAC3B,OAAOV,EAAa,GAAD,OAAIF,EAAJ,oCAAwCC,IAGtD,SAASY,EAAgB3B,GAC9B,OAAOgB,EAAa,GAAD,OAAIF,EAAJ,oBAAwBd,EAAxB,oBAAsCe,IAGpD,SAASa,EAAc5B,GAC5B,OAAOgB,EAAa,GAAD,OAAIF,EAAJ,oBAAwBd,EAAxB,4BAA8Ce,IAG5D,SAASc,EAAgB7B,GAC9B,OAAOgB,EAAa,GAAD,OAAIF,EAAJ,oBAAwBd,EAAxB,4BAA8Ce,IAG5D,SAAStB,EAAkBqC,GAChC,OAAOd,EAAa,GAAD,OACdF,EADc,mCACqBC,EADrB,yBAC6Ce","sources":["components/Button/Button.js","components/Searchbar/Searchbar.js","pages/Movies-list.js","pages/SearchMovies.js","services/movies-api.js"],"sourcesContent":["export default function Button() {\n  return <button className=\"search-button btn\">Search</button>;\n}\n","import { useState } from 'react';\n\nimport Button from '../Button';\n\nimport { toast } from 'react-toastify';\n\nimport PropTypes from 'prop-types';\n\nexport default function SearchBar({ onSubmit }) {\n  const [nameImage, setNameImage] = useState('');\n\n  const handleNameChange = e => {\n    setNameImage(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (nameImage.trim() === '') {\n      toast.error('–≤–≤–µ–¥–∏—Ç–µ –∏–º—è', { theme: 'colored' });\n      return;\n    }\n    onSubmit(nameImage);\n\n    setNameImage('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"header-form\">\n      <input\n        className=\"header-form__input-search\"\n        type=\"text\"\n        value={nameImage}\n        onChange={handleNameChange}\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />\n      <Button />\n    </form>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { fetchMoviesByName } from 'services/movies-api';\n\nimport Loader from 'components/Loader';\n\nexport default function MoviesList({ movieName }) {\n  const [movies, setMovies] = useState(null);\n  const [spinner, setSpiner] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      setSpiner(true);\n      try {\n        const { results } = await fetchMoviesByName(movieName);\n        if (results.length <= 0) {\n          throw new Error();\n        }\n        setMovies(results);\n        setSpiner(false);\n      } catch (error) {\n        toast.info(`Image with name ${movieName} not found üò¢`, {\n          theme: 'colored',\n        });\n        setSpiner(false);\n      }\n    };\n    fetchMovie();\n  }, [movieName]);\n\n  return (\n    <>\n      {spinner && <Loader />}\n      {movies && (\n        <ul>\n          {movies.map(({ original_title, id }) => {\n            return (\n              <li key={id}>\n                <Link\n                  to={`${id}`}\n                  state={{ pathname: `/movies?query=${movieName}` }}\n                >\n                  {original_title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  movieName: PropTypes.string.isRequired,\n};\n","import SearchBar from 'components/Searchbar';\n\nimport MoviesList from './Movies-list';\n\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nexport default function SearchMovies() {\n  const location = useLocation();\n\n  const searchString = new URLSearchParams(location.search).get('query');\n\n  const navigate = useNavigate();\n  const hundleFormSubmit = imageName => {\n    navigate(`?query=${imageName}`);\n  };\n  return (\n    <>\n      <SearchBar onSubmit={hundleFormSubmit} />\n      {searchString && <MoviesList movieName={searchString} />}\n    </>\n  );\n}\n","const BAZE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'e95cb0020c8da522f774c98098c822a8';\n\nasync function mainFetchApi(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopular(params) {\n  return mainFetchApi(`${BAZE_URL}/3/movie/popular?api_key=${API_KEY}`);\n}\n\nexport function fetchMoviesById(id) {\n  return mainFetchApi(`${BAZE_URL}/3/movie/${id}?api_key=${API_KEY}`);\n}\n\nexport function fetchCastById(id) {\n  return mainFetchApi(`${BAZE_URL}/3/movie/${id}/credits?api_key=${API_KEY}`);\n}\n\nexport function fetchReviewById(id) {\n  return mainFetchApi(`${BAZE_URL}/3/movie/${id}/reviews?api_key=${API_KEY}`);\n}\n\nexport function fetchMoviesByName(name) {\n  return mainFetchApi(\n    `${BAZE_URL}/3/search/movie?api_key=${API_KEY}&page=1&query=${name}`\n  );\n}\n\n// \"https://api.themoviedb.org/3/review/{review_id}?api_key=<<api_key>>\"\n"],"names":["Button","className","SearchBar","onSubmit","useState","nameImage","setNameImage","e","preventDefault","trim","toast","theme","type","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","MoviesList","movieName","movies","setMovies","spinner","setSpiner","useEffect","fetchMovie","fetchMoviesByName","results","length","Error","Loader","map","original_title","id","to","state","pathname","SearchMovies","location","useLocation","searchString","URLSearchParams","search","get","navigate","useNavigate","imageName","BAZE_URL","API_KEY","mainFetchApi","url","config","fetch","response","ok","json","Promise","reject","fetchPopular","params","fetchMoviesById","fetchCastById","fetchReviewById","name"],"sourceRoot":""}